import React, { useContext, useEffect, useRef, useState } from "react";
import Head from "next/head";
import useSWR from "swr";
import S from "./movies.module.scss";
import { useURL_TMDB } from "../../core/hooks/URL_TMDB/useURL_TMDB";

import {
  UI_I18n_title_pages,
  UI_I18n_title_word,
} from "../../core/Data/UI_I8n";

import { UIContext } from "../../core/context/UIProvider/UIProvider";
import Pagination from "../../core/components/Filter/Pagination/Pagination";
import Filter from "../../core/components/Filter/Filter";
import useMediaQuery from "../../core/hooks/mediaQueries/useMediaQueries";
import List_media from "../../core/components/List_media/Desktop/List_media";
import List_media_tablet from "../../core/components/List_media/Tablet/List_media_tablet";
import useTouchEvent from "../../core/hooks/touchEvent/useTouchEvent";
import DropList from "../../core/components/DropList/DropList";
import { Pagination_input } from "../../core/components/Filter/Pagination_input/Pagination_input";

const fetcher = (...args) => fetch(...args).then((res) => res.json());

export default function Media() {
  const [request, setRequest] = useState("discoverDESC");
  const [params, paramsURL] = useURL_TMDB(request);
  const SWR = useSWR(paramsURL[request](), fetcher);

  const { UI, callback } = useContext(UIContext);
  const isTablet = useMediaQuery("(max-width: 960px)");

  const pageRef = useRef();
  const { onTouch } = useTouchEvent(pageRef);

  useEffect(() => {
    if (
      onTouch.direction_X === "left" &&
      onTouch.percent_X > 20 &&
      onTouch.start === false
    ) {
      const newPage =
        params.pagination + 1 > params.maxPage ? 1 : params.pagination + 1;
      paramsURL.setPagination(newPage);
    } else if (
      onTouch.direction_X === "right" &&
      onTouch.percent_X > 20 &&
      onTouch.start === false
    ) {
      const newPage =
        params.pagination - 1 === 0 ? params.maxPage : params.pagination - 1;
      paramsURL.setPagination(newPage);
    }
  }, [onTouch.end]);

  if (SWR.error)
    return (
      <div className="error_container">
        <p className="error_text">Failed to load</p>
      </div>
    );

  return (
    <>
      <Head>
        <title>Prep academy - next - Movies</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>

      <div className="wrapper_inside" ref={pageRef}>
        <section className={S.media_page}>
          <header>
            <h2>{`${UI_I18n_title_pages[params.slug][UI.language]}  ${
              UI_I18n_title_word[`discover`][UI.language]
            }`}</h2>
          </header>
          <div className={S.media_page__content}>
            {
              /////////////////////////////////////////////////
              // Aside menu
              // Pagination
              // DropList => filter
              ////////////////////////////////////////////////
            }

            <aside className={S.aside_container}>
              {!isTablet ? (
                <>
                  <div className={S.bloc_aside}>
                    <header>
                      <h3>Navigation</h3>
                    </header>
                    <Pagination
                      callback={paramsURL.setPagination}
                      page={params.pagination}
                      style={
                        isTablet ? "pagination_mobil" : "pagination_desktop"
                      }
                    ></Pagination>
                    <Pagination_input
                      request={request}
                      currentPage={params.pagination}
                      callback={paramsURL.setPagination}
                    />
                  </div>
                </>
              ) : (
                <div className={S.bloc_aside}>
                  <Pagination_input
                    request={request}
                    currentPage={params.pagination}
                    callback={paramsURL.setPagination}
                  />
                </div>
              )}

              <div className={S.bloc_aside}>
                <DropList title={UI_I18n_title_word.filter[UI.language]}>
                  <Filter request={setRequest} />
                </DropList>
              </div>
            </aside>

            {
              /////////////////////////////////////////////////
              // List data Tablet
              // List data Desktop
              ////////////////////////////////////////////////
            }

            {!SWR.data ? (
              <div className="loading">Loading ...</div>
            ) : (
              <>
                {isTablet ? (
                  <List_media_tablet data={SWR.data} slug={params.slug} />
                ) : (
                  <List_media data={SWR.data} slug={params.slug}></List_media>
                )}
              </>
            )}
          </div>
        </section>
      </div>
    </>
  );
}
