@function centerAbsolute($size) {
  @return calc(50% - #{$size} / 2);
}

$space: 8px;

@function spacing($X) {
  @return calc(#{$X} * #{$space});
}

//Mixin

@mixin fullAbsolute($top: 0, $right: 0, $bottom: 0, $left: 0, $z: 10) {
  position: absolute;
  top: $top;
  left: $left;
  right: $right;
  bottom: $bottom;
  z-index: $z;
}

@mixin emptyContent() {
  content: "";
  position: absolute;
}

@mixin absoluteCornerBottomLeft($left: 0, $bottom: 0) {
  position: absolute;
  left: $left;
  bottom: $bottom;
}

@mixin absoluteCornerBottomRight($right: 0, $bottom: 0) {
  position: absolute;
  right: $right;
  bottom: $bottom;
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}
@mixin min-size($width, $height) {
  min-width: $width;
  min-height: $height;
}

@mixin max-size($width, $height) {
  max-width: $width;
  max-height: $height;
}
@mixin fullSize() {
  width: 100%;
  height: 100%;
}

@mixin circle() {
  border-radius: 50%;
}

@mixin responsiveContainer($width) {
  max-width: $width;
  width: 100%;
}

@mixin flexCenter($direction: row) {
  display: flex;
  flex-direction: $direction;
  flex-wrap: nowrap;
  justify-content: center;
  align-items: center;
}

@mixin text($size: null, $lineHeight: null, $weight: null) {
  // If the $size argument is not empty, then output the argument
  @if $size != null {
    font-size: $size;
  }

  // If the $lineHeight argument is not empty, then output the argument
  @if $lineHeight != null {
    line-height: $lineHeight;
  }

  // If the $weight argument is not empty, then output the argument
  @if $weight != null {
    font-weight: $weight;
  }
}

@mixin flex(
  $direction: row,
  $justifyContent: flex-start,
  $alignItems: flex-start,
  $wrap: wrap
) {
  display: flex;
  flex-direction: $direction;
  flex-wrap: $wrap;
  justify-content: $justifyContent;
  align-items: $alignItems;
}

// Let's name this "min-width" and take a single argument we can
// use to define the viewport width in a media query.
@mixin min-width($threshold) {
  // We're calling another function (scut-rem) to convert pixels to rem units.
  // We'll cover that in the next section.
  @media screen and (min-width: rem($threshold)) {
    @content;
  }
}

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self (false) - Whether or not to include current selector
/// @see https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

//Media Queries function

/**Landscape phone and down*/
@mixin xs {
  @media (max-width: 424px) {
    @content;
  }
}

/*Landscape phone to portrait tablet*/
@mixin sm {
  @media (max-width: 424px) {
    @content;
  }
}

@mixin max768 {
  @media (max-width: 767px) {
    @content;
  }
}

/*Portrait tablet to landscape and desktop*/
@mixin md {
  @media screen and (max-width: 425px) and (min-width: 768px) {
    @content;
  }
}

@mixin large {
  @media (min-width: 768px) {
    @content;
  }
}

/* Large desktop */
@mixin xl {
  @media (min-width: 1023px) {
    @content;
  }
}
